#!/usr/bin/env python
"""Provides boilerplate template for writing web exploit PoC."""

import argparse
import logging
import requests

__author__      = 'Austin Richards'
__copyright__   = 'Copyright 2021, Austin Richards'
__license__     = 'MIT'
__version__     = '1.0.0'
__status__      = 'Development'

proxies = None
session = None

def example(host, port):
    target = 'http://%s:%s/' % (host, port)

    session = requests.Session()
    session.get(target, proxies=proxies)


def exploit():
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument('--rhost', dest='rhost', required=True, help='the target to exploit')
    arg_parser.add_argument('--rport', dest='rport', default=80, help='the target service port to exploit (default: 80)')
    arg_parser.add_argument('--proxy', dest='proxy', help='the address to proxy requests through')
    arg_parser.add_argument('--verbose', '-v', dest='verbose', action='store_true', help='output verbose logging')
    args = arg_parser.parse_args()

    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)

    if args.proxy != None:
        proxies = {
            'http': args.proxy,
            'https': args.proxy
        }
        logging.debug('Enabled proxying (proxies: %s)' % (proxies))

    # TODO: Add your exploit PoC
    example(args.rhost, args.rport)

if __name__ == '__main__':
    exploit()
